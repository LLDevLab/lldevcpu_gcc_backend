diff -urN gcc-releases-gcc-8/config.sub gcc-releases-gcc-8-lldevcpu/config.sub
--- gcc-releases-gcc-8/config.sub	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/config.sub	2020-06-10 20:18:04.000000000 +0300
@@ -265,6 +265,7 @@
 	| k1om \
 	| le32 | le64 \
 	| lm32 \
+	| lldevcpu \
 	| m32c | m32r | m32rle | m68000 | m68k | m88k \
 	| maxq | mb | microblaze | microblazeel | mcore | mep | metag \
 	| mips | mipsbe | mipseb | mipsel | mipsle \
@@ -390,6 +391,7 @@
 	| k1om-* \
 	| le32-* | le64-* \
 	| lm32-* \
+	| lldevcpu-* \
 	| m32c-* | m32r-* | m32rle-* \
 	| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \
 	| m88110-* | m88k-* | maxq-* | mcore-* | metag-* \
diff -urN gcc-releases-gcc-8/configure gcc-releases-gcc-8-lldevcpu/configure
--- gcc-releases-gcc-8/configure	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/configure	2020-10-27 09:58:00.000000000 +0200
@@ -3,7 +3,7 @@
 # Generated by GNU Autoconf 2.64.
 #
 # Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
-# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software
+# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2020 Free Software
 # Foundation, Inc.
 #
 # This configure script is free software; the Free Software Foundation
@@ -3803,6 +3803,8 @@
   rs6000-*-*)
     noconfigdirs="$noconfigdirs gprof"
     ;;
+  lldevcpu-*-*)
+    ;;
   m68k-apollo-*)
     noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
     ;;
diff -urN gcc-releases-gcc-8/configure.ac gcc-releases-gcc-8-lldevcpu/configure.ac
--- gcc-releases-gcc-8/configure.ac	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/configure.ac	2020-10-27 09:58:07.000000000 +0200
@@ -1,6 +1,6 @@
 #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
 #   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
-#   2014, 2015, 2016 Free Software Foundation, Inc.
+#   2014, 2015, 2016, 2020 Free Software Foundation, Inc.
 #
 # This file is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by
@@ -1134,6 +1134,8 @@
   rs6000-*-*)
     noconfigdirs="$noconfigdirs gprof"
     ;;
+  lldevcpu-*-*)
+    ;;
   m68k-apollo-*)
     noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
     ;;
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/constraints.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/constraints.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/constraints.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/constraints.md	2021-01-04 20:30:14.000000000 +0200
@@ -0,0 +1,29 @@
+;; Constraint definitions for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; Constraints
+;; -------------------------------------------------------------------------
+
+(define_register_constraint "AP" "AP_REGS"
+"The value of address pointer register")
+
+(define_register_constraint "AD" "AD_REGS"
+"Data, that should be placed to a memory")
\ No newline at end of file
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.c gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.c
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.c	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.c	2021-01-10 09:12:25.732000000 +0200
@@ -0,0 +1,294 @@
+/* Target Code for lldevcpu
+   Copyright (C) 2008-2018 Free Software Foundation, Inc.
+   Contributed by Anthony Green.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GCC; see the file COPYING3.  If not see
+   <http://www.gnu.org/licenses/>.  */
+
+// Identifying machine specific .c file
+#define IN_TARGET_CODE 1
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "backend.h"
+#include "target.h"
+#include "rtl.h"
+#include "tree.h"
+#include "stringpool.h"
+#include "attribs.h"
+#include "df.h"
+#include "regs.h"
+#include "memmodel.h"
+#include "emit-rtl.h"
+#include "output.h"
+#include "calls.h"
+#include "builtins.h"
+
+#include "explow.h"
+
+/* This file should be included last.  */
+/* TARGET_INITIALIZER is located in this file */
+#include "target-def.h"
+
+#define LOSE_AND_RETURN(msgid, x)	\
+	do	\
+	{	\
+		lldevcpu_operand_losage(msgid, x);	\
+		return;	\
+	}	\
+	while(0)
+
+static void lldevcpu_operand_losage(const char *msgid, rtx op)
+{
+	debug_rtx(op);
+	output_operand_lossage("%s", msgid);
+}
+
+static void lldevcpu_print_operand_address(FILE* file, machine_mode, rtx x)
+{
+	rtx insn;
+	switch(GET_CODE(x))
+	{
+		case MINUS:
+			fprintf(file, "minus");
+			break;
+		case REG:
+			fprintf(file, "reg");
+			break;
+		case CONST_INT:
+			fprintf(file, "const_int");
+			break;
+		case CONST:
+			fprintf(file, "const");
+			break;
+		case SYMBOL_REF:
+			fprintf(file, "symbol_ref");
+			break;
+		case PLUS:
+			switch(GET_CODE(XEXP(x, 1)))
+			{
+				case CONST_INT:
+					fprintf(file, "%ld", INTVAL(XEXP(x, 1)));
+					//fprintf(file, "const_int");
+					break;
+				case SYMBOL_REF:
+					fprintf(file, "symbol_ref");
+					break;
+				case CONST:
+					fprintf(file, "const");
+					break;
+				default:
+					fprintf(file, "default");
+					break;
+			}
+			//fprintf(file, "%s", INTVAL(XEXP(x, 1)));
+			break;
+		default:
+			abort();
+			break;
+	}
+}
+
+/* The PRINT_OPERAND worker */
+static void lldevcpu_print_operand(FILE *file, rtx x, int code)
+{
+	rtx operand = x;
+
+	switch(code)
+	{
+		case 0:
+			break;
+		default:
+			LOSE_AND_RETURN("invalid operand modifier lettes", x);
+	}
+
+	switch(GET_CODE(operand))
+	{
+		case REG:
+			fprintf(file, "%s", reg_names[REGNO(operand)]);
+			break;
+		case MEM:
+			output_address(GET_MODE(XEXP(operand, 0)), XEXP(operand, 0));
+			break;
+		default:
+			if(CONSTANT_P(operand))
+			{
+				output_addr_const(file, operand);
+				break;
+			}
+			LOSE_AND_RETURN("unexpected operand", x);
+	}
+
+	return;
+}
+
+/* Handler for TARGET_LEGITIMATE_ADDRESS_P */
+static bool lldevcpu_legitimate_address_p(machine_mode mode ATTRIBUTE_UNUSED,
+						rtx x ATTRIBUTE_UNUSED,
+						bool strict ATTRIBUTE_UNUSED)
+{
+	return true;
+}
+
+/* Define TARGET_FUNCTION_VALUE
+to return function's values through r0 register */
+
+/* Handle for TARGET_FUNCTION_VALUE */
+static rtx lldevcpu_function_value(const_tree valtype,
+					const_tree fntype_or_decl ATTRIBUTE_UNUSED,
+					bool outgoing ATTRIBUTE_UNUSED)
+{
+	return gen_rtx_REG(TYPE_MODE(valtype), LLDEVCPU_R0);
+}
+
+/* Prologue and epilogue */
+
+/* Per-function machine data
+NB! GCC will put data from this structure to cfun->machine pointer.
+That pointer is used in lldevcpu_compute_frame function. */
+struct GTY(()) machine_function
+{
+	// Number of bytes saved on the stack for callee saved registers
+	int callee_save_reg_size;
+
+	// Number of bytes saved on the stack for local variables
+	int local_var_size;
+
+	// The sum of 2 sizes: local vars and padding byte for sasing the 
+	// registers. Used in expand_prologue() and expand_epilogue()
+	int size_for_adjusting_sp;
+};
+
+static struct machine_function* lldevcpu_init_machine_status(void)
+{
+	return ggc_cleared_alloc<machine_function>();
+}
+
+/* The TARGET_OPTION_OVERRIDE worker */
+static void lldevcpu_option_override(void)
+{
+	// Set the per-function-data initializer
+	init_machine_status = &lldevcpu_init_machine_status;
+}
+
+// Calculate the alignment for local variables
+int get_padding_locals(int frame_size)
+{
+	int stack_alignment = STACK_BOUNDARY / BITS_PER_UNIT;
+	int padding_locals = frame_size % stack_alignment;
+
+	// Align to the stack alignment
+	if(padding_locals)
+		padding_locals = stack_alignment - padding_locals;
+
+	return padding_locals;
+}
+
+/* Compute the size of the local area and the size to be ajusted by the
+* prologue and epilogue */
+static void lldevcpu_compute_frame(void)
+{
+	int regno;
+	int frame_size = get_frame_size();
+
+	cfun->machine->local_var_size = frame_size + get_padding_locals(frame_size);
+
+	// Reset the number of bytes saved on the stack for local variables
+	cfun->machine->callee_save_reg_size = 0;
+
+	for(regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)
+	{
+		// If the register is used in the current function
+		// and register is not used in the function call
+		if(df_regs_ever_live_p(regno) && (!call_used_regs[regno]))
+		{
+			// Increment the number of bytes, saved on the stack 
+			// for local variables by size of the register
+			cfun->machine->callee_save_reg_size += 4;
+		}
+	}
+
+	cfun->machine->size_for_adjusting_sp =
+		crtl->args.pretend_args_size +
+		cfun->machine->local_var_size +
+		(ACCUMULATE_OUTGOING_ARGS ?
+			(HOST_WIDE_INT)crtl->outgoing_args_size : 0);
+}
+
+void lldevcpu_expand_prologue(void)
+{
+	int regno;
+	rtx insn;
+
+	lldevcpu_compute_frame();
+
+	// As I understood, flag_stack_usage_info will be true, when
+	// unit compiled with -fstack-usage flag
+	if(flag_stack_usage_info)
+		current_function_static_stack_size = 
+			cfun->machine->size_for_adjusting_sp;
+
+	for(regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)
+	{
+		if(!fixed_regs[regno] && df_regs_ever_live_p(regno) && 
+			!call_used_regs[regno])
+		{
+			insn = emit_insn(gen_movsi_push(gen_rtx_REG(Pmode, regno)));
+			RTX_FRAME_RELATED_P(insn) = 1;
+		}
+	}
+
+	if(cfun->machine->size_for_adjusting_sp <= 0)
+		return;
+
+	insn = emit_insn(gen_subsi3(stack_pointer_rtx,
+					stack_pointer_rtx,
+					GEN_INT(cfun->machine->size_for_adjusting_sp)));
+
+	RTX_FRAME_RELATED_P(insn) = 1;
+}
+
+void lldevcpu_expand_epilogue(void)
+{
+	emit_jump_insn(gen_returner());
+}
+
+/* Implements the macro INITIAL_ELIMINATION_OFFSET, return the OFFSET.  */
+
+/* The Global `targetm' Variable.  */
+
+/* Initialize the GCC target structure.  */
+
+/* Define this to return an RTX representing the place where a
+function returns or receives a value of data type RET_TYPE, a tree
+node representing a data type */
+#undef TARGET_LEGITIMATE_ADDRESS_P
+#define TARGET_LEGITIMATE_ADDRESS_P lldevcpu_legitimate_address_p
+#undef TARGET_FUNCTION_VALUE
+#define TARGET_FUNCTION_VALUE lldevcpu_function_value
+
+#undef TARGET_OPTION_OVERRIDE
+#define TARGET_OPTION_OVERRIDE lldevcpu_option_override
+
+#undef TARGET_PRINT_OPERAND
+#define TARGET_PRINT_OPERAND lldevcpu_print_operand
+#undef TARGET_PRINT_OPERAND_ADDRESS
+#define TARGET_PRINT_OPERAND_ADDRESS lldevcpu_print_operand_address
+
+struct gcc_target targetm = TARGET_INITIALIZER;
+
+#include "gt-lldevcpu.h"
\ No newline at end of file
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.h gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.h
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.h	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.h	2021-01-09 11:17:49.396000000 +0200
@@ -0,0 +1,286 @@
+/* Target Definitions for lldevcpu.
+   Copyright (C) 2008-2018 Free Software Foundation, Inc.
+   Contributed by Anthony Green.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GCC; see the file COPYING3.  If not see
+   <http://www.gnu.org/licenses/>.  */
+
+#ifndef GCC_LLDEVCPU_H
+#define GCC_LLDEVCPU_H
+
+/* Layout of Source Language Data Types */
+
+#define DEFAULT_SIGNED_CHAR 0
+
+/* Registers...
+
+   r0  - general purpose 32-bit register.
+   r1  - general purpose 32-bit register.
+   r2  - general purpose 32-bit register.
+   r3  - general purpose 32-bit register.
+   r4  - general purpose 32-bit register.
+   r5  - general purpose 32-bit register.
+   r6  - general purpose 32-bit register.
+   r7  - general purpose 32-bit register.
+   r8  - general purpose 32-bit register.
+   r9  - general purpose 32-bit register.
+   r10 - address data register.
+   r11 - address pointer.
+   r12 - frame pointer.
+   r13 - status register.
+   r14 - stack pointer.
+
+   Special Registers...
+
+   r15 - 32-bit program counter.
+   
+*/
+
+#define REGISTER_NAMES {	\
+  "$r0", "$r1", "$r2", "$r3",	\
+  "$r4", "$r5", "$r6", "$r7",	\
+  "$r8", "$r9", "$r10", "$r11",	\
+  "$r12", "$r13", "$r14", "$r15" }
+
+#define LLDEVCPU_R0		0
+#define LLDEVCPU_R1		1
+#define LLDEVCPU_R2		2
+#define LLDEVCPU_R3		3
+#define LLDEVCPU_R4		4
+#define LLDEVCPU_R5		5
+#define LLDEVCPU_R6		6
+#define LLDEVCPU_R7		7
+#define LLDEVCPU_R8		8
+#define LLDEVCPU_R9		9
+// AD - address data
+#define LLDEVCPU_AD		10
+// AP - address pointer
+#define LLDEVCPU_AP		11
+#define LLDEVCPU_FP		12
+#define LLDEVCPU_CC		13
+#define LLDEVCPU_SP		14
+#define LLDEVCPU_PC		15
+
+#define FIRST_PSEUDO_REGISTER 16
+
+enum reg_class
+{
+  NO_REGS,
+  GENERAL_REGS,
+  AD_REGS,
+  AP_REGS,
+  CC_REGS,
+  SPECIAL_REGS,
+  ALL_REGS,
+  LIM_REG_CLASSES
+};
+
+
+#define REG_CLASS_CONTENTS \
+{ { 0x00000000 }, /* Empty */ \
+  { 0x000053FF }, /* r0 to r9, r12 (frame pointer), r14 (stack pointer) */ \
+  { 0x00000400 }, /* r10 (address data) */ \
+  { 0x00000800 }, /* r11 (address pointer) */ \
+  { 0x00002000 }, /* r13 (conditional codes) */ \
+  { 0x00008000 }, /* r15 (program counter) */ \
+  { 0x0000FFFF }  /* All registers */ \
+}
+
+#define N_REG_CLASSES LIM_REG_CLASSES
+
+#define REG_CLASS_NAMES {\
+    "NO_REGS", \
+    "GENERAL_REGS", \
+    "AD_REGS", \
+    "AP_REGS", \
+    "CC_REGS", \
+    "SPECIAL_REGS", \
+    "ALL_REGS" }
+
+#define FIXED_REGISTERS     { 0, 0, 0, 0, \
+			      0, 0, 0, 0, \
+			      0, 0, 1, 1, \
+			      1, 1, 1, 1 }
+
+#define CALL_USED_REGISTERS { 1, 1, 1, 1, \
+			      0, 0, 0, 0, \
+			      0, 0, 1, 1, \
+			      1, 1, 1, 1 }
+
+/* A C expression whose value is a register class containing hard
+   register REGNO.  */
+#define REGNO_REG_CLASS(R) ((R < LLDEVCPU_AP) ? GENERAL_REGS : \
+				R == LLDEVCPU_AP ? AP_REGS : \
+				R == LLDEVCPU_AD ? AD_REGS : \
+				R == LLDEVCPU_CC ? CC_REGS : \
+				SPECIAL_REGS)
+
+/* The Overall Framework of an Assembler File */
+
+#define ASM_APP_ON ""
+#define ASM_APP_OFF ""
+
+/* Assembler Commands for Alignment */
+
+#define ASM_OUTPUT_ALIGN(STREAM,POWER) \
+	fprintf (STREAM, "\t.p2align\t%d\n", POWER);
+
+/* Output and Generation of Labels */
+
+#define GLOBAL_ASM_OP "\t.global\t"
+
+/* Passing Arguments in Registers */
+
+/* A C type for declaring a variable that is used as the first
+   argument of `FUNCTION_ARG' and other related values.  */
+#define CUMULATIVE_ARGS unsigned int
+
+/* A C statement (sans semicolon) for initializing the variable CUM
+   for the state at the beginning of the argument list.  
+   For LLDEVCPU, the first arg is passed in register 2 (aka $r0).  */
+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \
+  (CUM = LLDEVCPU_R0)
+
+/* How Scalar Function Values Are Returned */
+
+/* STACK AND CALLING */
+
+/* Define this macro if pushing a word onto the stack moves the stack
+   pointer to a smaller address.  */
+#define STACK_GROWS_DOWNWARD 1
+
+/* Offset from the argument pointer register to the first argument's
+   address.  On some machines it may depend on the data type of the
+   function.  */
+#define FIRST_PARM_OFFSET(F) 12
+
+/* Define this macro to nonzero value if the addresses of local variable slots
+   are at negative offsets from the frame pointer.  */
+#define FRAME_GROWS_DOWNWARD 1
+
+/* Storage Layout */
+
+#define BITS_BIG_ENDIAN 0
+#define BYTES_BIG_ENDIAN 0
+#define WORDS_BIG_ENDIAN 0
+
+/* Alignment required for a function entry point, in bits.  */
+#define FUNCTION_BOUNDARY 16
+
+/* Define this macro as a C expression which is nonzero if accessing
+   less than a word of memory (i.e. a `char' or a `short') is no
+   faster than accessing a word of memory.  */
+#define SLOW_BYTE_ACCESS 1
+
+/* Number of storage units in a word; normally the size of a
+   general-purpose register, a power of two from 1 or 8.  */
+#define UNITS_PER_WORD 4
+
+/* Define this macro to the minimum alignment enforced by hardware
+   for the stack pointer on this machine.  The definition is a C
+   expression for the desired alignment (measured in bits).  */
+#define STACK_BOUNDARY 32
+
+/* Normal alignment required for function parameters on the stack, in
+   bits.  All stack parameters receive at least this much alignment
+   regardless of data type.  */
+#define PARM_BOUNDARY 32
+
+/* No data type wants to be aligned rounder than this.  */
+#define BIGGEST_ALIGNMENT 32
+
+/* Set this nonzero if move instructions will actually fail to work
+   when given unaligned data.  */
+#define STRICT_ALIGNMENT 1
+
+/* Generating Code for Profiling */
+#define FUNCTION_PROFILER(FILE,LABELNO) (abort (), 0)
+
+/* Trampolines for Nested Functions.  */
+#define TRAMPOLINE_SIZE (2 + 6 + 4 + 2 + 6)
+
+/* An alias for the machine mode for pointers.  */
+#define Pmode         SImode
+
+/* An alias for the machine mode used for memory references to
+   functions being called, in `call' RTL expressions.  */
+#define FUNCTION_MODE SImode
+
+/* The register number of the stack pointer register, which must also
+   be a fixed register according to `FIXED_REGISTERS'.  */
+#define STACK_POINTER_REGNUM LLDEVCPU_SP
+
+/* The register number of the frame pointer register, which is used to
+   access automatic variables in the stack frame.  */
+#define FRAME_POINTER_REGNUM LLDEVCPU_FP
+
+/* The register number of the arg pointer register, which is used to
+   access the function's argument list.  */
+#define ARG_POINTER_REGNUM LLDEVCPU_FP
+
+#define ELIMINABLE_REGS	\
+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM }, \
+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM }, \
+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM }}
+
+/* This macro returns the initial difference between the specified pair
+   of registers.  */
+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) 0
+
+/* A C expression that is nonzero if REGNO is the number of a hard
+   register in which function arguments are sometimes passed.  */
+#define FUNCTION_ARG_REGNO_P(r) 0
+
+/* A macro whose definition is the name of the class to which a valid
+   base register must belong.  A base register is one used in an
+   address which is the register value plus a displacement.  */
+#define BASE_REG_CLASS GENERAL_REGS
+
+#define INDEX_REG_CLASS NO_REGS
+
+#define REGNO_OK_FOR_BASE_P(NUM) 0
+
+/* A C expression which is nonzero if register number NUM is suitable
+   for use as an index register in operand addresses.  */
+#define REGNO_OK_FOR_INDEX_P(NUM) 0
+
+/* The maximum number of bytes that a single instruction can move
+   quickly between memory and registers or between two memory
+   locations.  */
+#define MOVE_MAX 4
+
+/* A number, the maximum number of registers that can appear in a
+   valid memory address.  */
+#define MAX_REGS_PER_ADDRESS 1
+
+/* An alias for a machine mode name.  This is the machine mode that
+   elements of a jump-table should have.  */
+#define CASE_VECTOR_MODE SImode
+
+#define HARD_REGNO_OK_FOR_BASE_P(NUM)	\
+	((unsigned) (NUM) < FIRST_PSEUDO_REGISTER \
+	&& (REGNO_REG_CLASS(NUM) == GENERAL_REGS))
+
+/* Run-time Target Specification */
+
+#define TARGET_CPU_CPP_BUILTINS() \
+  { \
+    builtin_define_std ("LLDEVCPU");			\
+    builtin_define_std ("LLDEVCPU");			\
+    builtin_define ("__LLDEVCPU_LITTLE_ENDIAN__");	\
+  }
+
+#endif /* GCC_LLDEVCPU_H */
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.md	2021-01-08 20:27:23.060000000 +0200
@@ -0,0 +1,193 @@
+;; Machine description for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; lldevcpu specific constraints, predicates and attributes
+;; -------------------------------------------------------------------------
+
+(include "constraints.md")
+(include "predicates.md")
+
+; All instructions are 4 bytes long.
+(define_attr "length" "" (const_int 4))
+
+;; -------------------------------------------------------------------------
+;; nop instruction
+;; -------------------------------------------------------------------------
+
+(define_insn "nop"
+  [(const_int 0)]
+  ""
+  "nop")
+
+;; -------------------------------------------------------------------------
+;; Arithmetic instructions
+;; -------------------------------------------------------------------------
+
+(define_insn "subsi3"
+	[(set (match_operand:SI 0 "nonimmediate_operand" "=r,r,AP")
+		(minus:SI
+		(match_operand:SI 1 "nonimmediate_operand" "0,0,0")
+		(match_operand:SI 2 "general_operand" "r,i,m")))]
+	""
+	"@
+	sub\t%0, %2
+	sub.i\\t%0, %2
+	sub.i\\t%0, %2"
+)
+
+(define_insn "addsi3"
+	[(set (match_operand:SI 0 "nonimmediate_operand" "=r,r,AP")
+		(plus:SI
+		(match_operand:SI 1 "nonimmediate_operand" "0,0,0")
+		(match_operand:SI 2 "general_operand" "r,i,m")))]
+	""
+	"@
+	add\t%0, %2
+	add.i\\t%0, %2
+	add.i\\t%0, %2"
+)
+
+
+;; -------------------------------------------------------------------------
+;; Unary arithmetic instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Logical operators
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Shifters
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Move instructions
+;; -------------------------------------------------------------------------
+
+;; SImode
+
+(define_expand "movsi"
+	[(set (match_operand:SI 0 "nonimmediate_operand" "")
+	(match_operand:SI 1 "general_operand" ""))]
+	""
+	"
+{
+	rtx reg_fp;
+	rtx reg_ap;
+	rtx reg_ad;
+
+	switch(GET_CODE(operands[0]))
+	{
+		case MEM:
+			reg_fp = gen_rtx_REG(SImode, LLDEVCPU_FP);
+			reg_ap = gen_rtx_REG(SImode, LLDEVCPU_AP);
+			reg_ad = gen_rtx_REG(SImode, LLDEVCPU_AD);
+			switch(GET_CODE(operands[1]))
+			{
+				case CONST_INT:
+					emit_move_insn(reg_ap, reg_fp);
+					emit_insn(gen_addsi3(reg_ap, reg_ap, operands[0]));
+					emit_move_insn(reg_ad, operands[1]);
+					emit_move_insn(reg_ap, reg_ad);
+					DONE;
+					break;
+				default:
+					FAIL;
+					break;
+			}
+			break;
+		default:
+			break;
+	}
+}")
+
+(define_insn "*movsi"
+	[(set (match_operand:SI 0 "nonimmediate_operand" "=r,r,r,r,AP,AP,AP,AD,AD,AD")
+	(match_operand:SI 1 "general_operand" "r,AP,AD,i,r,AD,i,r,AP,i"))]
+	""
+	"@
+	mov\\t%0, %1
+	mov\\t%0, %1
+	mov\\t%0, %1
+	ldi\\t%0, %1
+	mov\\t%0, %1
+	st\\t%0, %1
+	ldi\\t%0, %1
+	mov\\t%0, %1
+	ld\\t%0, %1
+	ldi\\t%0, %1")
+
+;; Push a register to the stack
+(define_insn "movsi_push"
+	[(match_operand:SI 0 "register_operand" "r")]
+	""
+	"push\t%0")
+
+;; Load and store instructions
+
+;; Pop a register from the stack
+
+;; -------------------------------------------------------------------------
+;; Compare instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Branch instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Call and Jump instructions
+;; -------------------------------------------------------------------------
+
+(define_insn "jump"
+	[(set (pc)
+	(label_ref(match_operand 0 "" "")))]
+	""
+	"br\\t%1")
+
+;; -------------------------------------------------------------------------
+;; Prologue & Epilogue
+;; -------------------------------------------------------------------------
+
+(define_expand "prologue"
+	[(clobber (const_int 0))]
+	""
+	"
+{
+	lldevcpu_expand_prologue();
+	DONE;
+}
+")
+
+(define_expand "epilogue"
+	[(return)]
+	""
+	"
+{
+	lldevcpu_expand_epilogue();
+	DONE;
+}
+	")
+
+(define_insn "returner"
+	[(return)]
+	"reload_completed"
+	"ret")
\ No newline at end of file
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu-protos.h gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu-protos.h
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu-protos.h	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu-protos.h	2021-01-10 09:12:01.060000000 +0200
@@ -0,0 +1,21 @@
+/* Prototypes for moxie.c functions used in the md file & elsewhere.
+   Copyright (C) 2009-2018 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+extern void lldevcpu_expand_epilogue(void);
+extern void lldevcpu_expand_prologue(void);
\ No newline at end of file
diff -urN gcc-releases-gcc-8/gcc/config/lldevcpu/predicates.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/predicates.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/predicates.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/predicates.md	2020-10-28 11:56:57.000000000 +0200
@@ -0,0 +1,25 @@
+;; Predicate definitions for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; Predicates
+;; -------------------------------------------------------------------------
+
+;; Nonzero if OP can be source of a simple move operation
diff -urN gcc-releases-gcc-8/gcc/config.gcc gcc-releases-gcc-8-lldevcpu/gcc/config.gcc
--- gcc-releases-gcc-8/gcc/config.gcc	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config.gcc	2020-10-27 10:04:31.000000000 +0200
@@ -349,6 +349,10 @@
 ft32*)	cpu_type=ft32
 	target_has_targetm_common=no
 	;;
+lldevcpu*)
+	cpu_type=lldevcpu
+	target_has_targetm_common=no
+	;;
 moxie*)	cpu_type=moxie
 	target_has_targetm_common=no
 	;;
@@ -1330,6 +1334,9 @@
 	tm_file="${tm_file} dbxelf.h elfos.h moxie/moxiebox.h newlib-stdint.h"
 	tmake_file="${tmake_file} moxie/t-moxiebox"
 	;;
+lldevcpu-*-*)
+	tm_file="dbxelf.h elfos.h newlib-stdint.h ${tm_file}"
+	;;
 h8300-*-elf*)
 	tmake_file="h8300/t-h8300"
 	tm_file="h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h"
