diff -ruN gcc-releases-gcc-8/config.sub gcc-releases-gcc-8-lldevcpu/config.sub
--- gcc-releases-gcc-8/config.sub	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/config.sub	2020-06-10 20:18:04.000000000 +0300
@@ -265,6 +265,7 @@
 	| k1om \
 	| le32 | le64 \
 	| lm32 \
+	| lldevcpu \
 	| m32c | m32r | m32rle | m68000 | m68k | m88k \
 	| maxq | mb | microblaze | microblazeel | mcore | mep | metag \
 	| mips | mipsbe | mipseb | mipsel | mipsle \
@@ -390,6 +391,7 @@
 	| k1om-* \
 	| le32-* | le64-* \
 	| lm32-* \
+	| lldevcpu-* \
 	| m32c-* | m32r-* | m32rle-* \
 	| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \
 	| m88110-* | m88k-* | maxq-* | mcore-* | metag-* \
diff -ruN gcc-releases-gcc-8/configure gcc-releases-gcc-8-lldevcpu/configure
--- gcc-releases-gcc-8/configure	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/configure	2020-09-01 20:09:12.000000000 +0300
@@ -3,7 +3,7 @@
 # Generated by GNU Autoconf 2.64.
 #
 # Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
-# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software
+# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2020 Free Software
 # Foundation, Inc.
 #
 # This configure script is free software; the Free Software Foundation
@@ -3803,6 +3803,8 @@
   rs6000-*-*)
     noconfigdirs="$noconfigdirs gprof"
     ;;
+  lldevcpu-*-*)
+    ;;
   m68k-apollo-*)
     noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
     ;;
diff -ruN gcc-releases-gcc-8/configure.ac gcc-releases-gcc-8-lldevcpu/configure.ac
--- gcc-releases-gcc-8/configure.ac	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/configure.ac	2020-09-01 20:18:19.000000000 +0300
@@ -1,6 +1,6 @@
 #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
 #   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
-#   2014, 2015, 2016 Free Software Foundation, Inc.
+#   2014, 2015, 2016, 2020 Free Software Foundation, Inc.
 #
 # This file is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by
@@ -1134,6 +1134,8 @@
   rs6000-*-*)
     noconfigdirs="$noconfigdirs gprof"
     ;;
+  lldevcpu-*-*)
+    ;;
   m68k-apollo-*)
     noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
     ;;
diff -ruN gcc-releases-gcc-8/gcc/config/lldevcpu/constraints.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/constraints.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/constraints.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/constraints.md	2020-08-13 20:18:48.000000000 +0300
@@ -0,0 +1,23 @@
+;; Constraint definitions for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; Constraints
+;; -------------------------------------------------------------------------
\ No newline at end of file
diff -ruN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.c gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.c
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.c	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.c	2020-08-22 15:48:57.000000000 +0300
@@ -0,0 +1,49 @@
+/* Target Code for lldevcpu
+   Copyright (C) 2008-2018 Free Software Foundation, Inc.
+   Contributed by Anthony Green.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GCC; see the file COPYING3.  If not see
+   <http://www.gnu.org/licenses/>.  */
+
+// Identifying machine specific .c file
+#define IN_TARGET_CODE 1
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "backend.h"
+#include "target.h"
+#include "rtl.h"
+#include "tree.h"
+#include "stringpool.h"
+#include "attribs.h"
+#include "memmodel.h"
+#include "emit-rtl.h"
+#include "output.h"
+#include "calls.h"
+#include "builtins.h"
+
+/* This file should be included last.  */
+/* TARGET_INITIALIZER is located in this file */
+#include "target-def.h"
+
+/* Implements the macro INITIAL_ELIMINATION_OFFSET, return the OFFSET.  */
+
+/* The Global `targetm' Variable.  */
+
+/* Initialize the GCC target structure.  */
+
+struct gcc_target targetm = TARGET_INITIALIZER;
diff -ruN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.h gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.h
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.h	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.h	2020-08-28 18:25:25.000000000 +0300
@@ -0,0 +1,271 @@
+/* Target Definitions for lldevcpu.
+   Copyright (C) 2008-2018 Free Software Foundation, Inc.
+   Contributed by Anthony Green.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with GCC; see the file COPYING3.  If not see
+   <http://www.gnu.org/licenses/>.  */
+
+#ifndef GCC_LLDEVCPU_H
+#define GCC_LLDEVCPU_H
+
+/* Layout of Source Language Data Types */
+
+#define DEFAULT_SIGNED_CHAR 0
+
+/* Registers...
+
+   r0  - general purpose 32-bit register.
+   r1  - general purpose 32-bit register.
+   r2  - general purpose 32-bit register.
+   r3  - general purpose 32-bit register.
+   r4  - general purpose 32-bit register.
+   r5  - general purpose 32-bit register.
+   r6  - general purpose 32-bit register.
+   r7  - general purpose 32-bit register.
+   r8  - general purpose 32-bit register.
+   r9  - general purpose 32-bit register.
+   r10 - general purpose 32-bit register.
+   r11 - general purpose 32-bit register.
+   r12 - frame pointer.
+   r13 - status register.
+   r14 - stack pointer.
+
+   Special Registers...
+
+   r15 - 32-bit program counter.
+   
+*/
+
+#define REGISTER_NAMES {	\
+  "r0", "r1", "r2", "r3",	\
+  "r4", "r5", "r6", "r7",	\
+  "r8", "r9", "r10", "r11",	\
+  "r12", "r13", "r14", "r15" }
+
+#define LLDEVCPU_R0     0
+#define LLDEVCPU_R1     1
+#define LLDEVCPU_R2     2
+#define LLDEVCPU_R3     3
+#define LLDEVCPU_R4     4
+#define LLDEVCPU_R5     5
+#define LLDEVCPU_R6     6
+#define LLDEVCPU_R7     7
+#define LLDEVCPU_R8     8
+#define LLDEVCPU_R9     9
+#define LLDEVCPU_R10    10
+#define LLDEVCPU_R11    11
+#define LLDEVCPU_FP     12
+#define LLDEVCPU_CC     13
+#define LLDEVCPU_SP     14
+#define LLDEVCPU_PC     15
+
+#define FIRST_PSEUDO_REGISTER 16
+
+enum reg_class
+{
+  NO_REGS,
+  GENERAL_REGS,
+  CC_REGS,
+  SPECIAL_REGS,
+  ALL_REGS,
+  LIM_REG_CLASSES
+};
+
+
+#define REG_CLASS_CONTENTS \
+{ { 0x00000000 }, /* Empty */			\
+  { 0x00005FFF }, /* r0 to r11, r12 (frame pointer), r14 (stack pointer) */ \
+  { 0x00002000 }, /* r13 (conditional codes) */                  	\
+  { 0x00008000 }, /* r15 (program counter) */	               	\
+  { 0x0000FFFF }  /* All registers */        	\
+}
+
+#define N_REG_CLASSES LIM_REG_CLASSES
+
+#define REG_CLASS_NAMES {\
+    "NO_REGS", \
+    "GENERAL_REGS", \
+    "CC_REGS", \
+    "SPECIAL_REGS", \
+    "ALL_REGS" }
+
+#define FIXED_REGISTERS     { 0, 0, 0, 0, \
+			      0, 0, 0, 0, \
+			      0, 0, 0, 0, \
+			      1, 1, 1, 1 }
+
+#define CALL_USED_REGISTERS { 1, 1, 1, 1, \
+			      1, 1, 0, 0, \
+			      0, 0, 0, 0, \
+			      1, 1, 1, 1 }
+
+/* A C expression whose value is a register class containing hard
+   register REGNO.  */
+#define REGNO_REG_CLASS(R) ((R < LLDEVCPU_FP) ? GENERAL_REGS :		\
+                            (R == LLDEVCPU_CC ? CC_REGS : SPECIAL_REGS))
+
+/* The Overall Framework of an Assembler File */
+
+#define ASM_APP_ON ""
+#define ASM_APP_OFF ""
+
+/* Assembler Commands for Alignment */
+
+#define ASM_OUTPUT_ALIGN(STREAM,POWER) \
+	fprintf (STREAM, "\t.p2align\t%d\n", POWER);
+
+/* Output and Generation of Labels */
+
+#define GLOBAL_ASM_OP "\t.global\t"
+
+/* Passing Arguments in Registers */
+
+/* A C type for declaring a variable that is used as the first
+   argument of `FUNCTION_ARG' and other related values.  */
+#define CUMULATIVE_ARGS unsigned int
+
+/* A C statement (sans semicolon) for initializing the variable CUM
+   for the state at the beginning of the argument list.  
+   For LLDEVCPU, the first arg is passed in register 2 (aka $r0).  */
+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \
+  (CUM = LLDEVCPU_R0)
+
+/* How Scalar Function Values Are Returned */
+
+/* STACK AND CALLING */
+
+/* Define this macro if pushing a word onto the stack moves the stack
+   pointer to a smaller address.  */
+#define STACK_GROWS_DOWNWARD 1
+
+/* Offset from the argument pointer register to the first argument's
+   address.  On some machines it may depend on the data type of the
+   function.  */
+#define FIRST_PARM_OFFSET(F) 12
+
+/* Define this macro to nonzero value if the addresses of local variable slots
+   are at negative offsets from the frame pointer.  */
+#define FRAME_GROWS_DOWNWARD 1
+
+/* Storage Layout */
+
+#define BITS_BIG_ENDIAN 0
+#define BYTES_BIG_ENDIAN 0
+#define WORDS_BIG_ENDIAN 0
+
+/* Alignment required for a function entry point, in bits.  */
+#define FUNCTION_BOUNDARY 16
+
+/* Define this macro as a C expression which is nonzero if accessing
+   less than a word of memory (i.e. a `char' or a `short') is no
+   faster than accessing a word of memory.  */
+#define SLOW_BYTE_ACCESS 1
+
+/* Number of storage units in a word; normally the size of a
+   general-purpose register, a power of two from 1 or 8.  */
+#define UNITS_PER_WORD 4
+
+/* Define this macro to the minimum alignment enforced by hardware
+   for the stack pointer on this machine.  The definition is a C
+   expression for the desired alignment (measured in bits).  */
+#define STACK_BOUNDARY 32
+
+/* Normal alignment required for function parameters on the stack, in
+   bits.  All stack parameters receive at least this much alignment
+   regardless of data type.  */
+#define PARM_BOUNDARY 32
+
+/* No data type wants to be aligned rounder than this.  */
+#define BIGGEST_ALIGNMENT 32
+
+/* Set this nonzero if move instructions will actually fail to work
+   when given unaligned data.  */
+#define STRICT_ALIGNMENT 1
+
+/* Generating Code for Profiling */
+#define FUNCTION_PROFILER(FILE,LABELNO) (abort (), 0)
+
+/* Trampolines for Nested Functions.  */
+#define TRAMPOLINE_SIZE (2 + 6 + 4 + 2 + 6)
+
+/* An alias for the machine mode for pointers.  */
+#define Pmode         SImode
+
+/* An alias for the machine mode used for memory references to
+   functions being called, in `call' RTL expressions.  */
+#define FUNCTION_MODE SImode
+
+/* The register number of the stack pointer register, which must also
+   be a fixed register according to `FIXED_REGISTERS'.  */
+#define STACK_POINTER_REGNUM LLDEVCPU_SP
+
+/* The register number of the frame pointer register, which is used to
+   access automatic variables in the stack frame.  */
+#define FRAME_POINTER_REGNUM LLDEVCPU_FP
+
+/* The register number of the arg pointer register, which is used to
+   access the function's argument list.  */
+#define ARG_POINTER_REGNUM LLDEVCPU_FP
+
+#define ELIMINABLE_REGS	\
+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM }, \
+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM }, \
+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM }}
+
+/* This macro returns the initial difference between the specified pair
+   of registers.  */
+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) 0
+
+/* A C expression that is nonzero if REGNO is the number of a hard
+   register in which function arguments are sometimes passed.  */
+#define FUNCTION_ARG_REGNO_P(r) 0
+
+/* A macro whose definition is the name of the class to which a valid
+   base register must belong.  A base register is one used in an
+   address which is the register value plus a displacement.  */
+#define BASE_REG_CLASS GENERAL_REGS
+
+#define INDEX_REG_CLASS NO_REGS
+
+#define REGNO_OK_FOR_BASE_P(NUM) 0
+
+/* A C expression which is nonzero if register number NUM is suitable
+   for use as an index register in operand addresses.  */
+#define REGNO_OK_FOR_INDEX_P(NUM) 0
+
+/* The maximum number of bytes that a single instruction can move
+   quickly between memory and registers or between two memory
+   locations.  */
+#define MOVE_MAX 4
+
+/* A number, the maximum number of registers that can appear in a
+   valid memory address.  */
+#define MAX_REGS_PER_ADDRESS 1
+
+/* An alias for a machine mode name.  This is the machine mode that
+   elements of a jump-table should have.  */
+#define CASE_VECTOR_MODE SImode
+
+/* Run-time Target Specification */
+
+#define TARGET_CPU_CPP_BUILTINS() \
+  { \
+    builtin_define_std ("LLDEVCPU");			\
+    builtin_define_std ("LLDEVCPU");			\
+    builtin_define ("__LLDEVCPU_LITTLE_ENDIAN__");	\
+  }
+
+#endif /* GCC_LLDEVCPU_H */
diff -ruN gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/lldevcpu.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/lldevcpu.md	2020-08-22 15:43:19.000000000 +0300
@@ -0,0 +1,85 @@
+;; Machine description for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; lldevcpu specific constraints, predicates and attributes
+;; -------------------------------------------------------------------------
+
+(include "constraints.md")
+(include "predicates.md")
+
+; Most instructions are two bytes long.
+(define_attr "length" "" (const_int 2))
+
+;; -------------------------------------------------------------------------
+;; nop instruction
+;; -------------------------------------------------------------------------
+
+(define_insn "nop"
+  [(const_int 0)]
+  ""
+  "nop")
+
+;; -------------------------------------------------------------------------
+;; Arithmetic instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Unary arithmetic instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Logical operators
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Shifters
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Move instructions
+;; -------------------------------------------------------------------------
+
+;; SImode
+
+;; Push a register to the stack
+
+;; Pop a register from the stack
+
+;; -------------------------------------------------------------------------
+;; Compare instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Branch instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Call and Jump instructions
+;; -------------------------------------------------------------------------
+
+;; -------------------------------------------------------------------------
+;; Prologue & Epilogue
+;; -------------------------------------------------------------------------
+
+(define_insn "returner"
+  [(return)]
+  "reload_completed"
+  "ret")
diff -ruN gcc-releases-gcc-8/gcc/config/lldevcpu/predicates.md gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/predicates.md
--- gcc-releases-gcc-8/gcc/config/lldevcpu/predicates.md	1970-01-01 03:00:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config/lldevcpu/predicates.md	2020-08-11 20:44:08.000000000 +0300
@@ -0,0 +1,23 @@
+;; Predicate definitions for lldevcpu
+;; Copyright (C) 2009-2020 Free Software Foundation, Inc.
+;; Contributed by LLDevLab <lldevlab@gmail.com>
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+;; -------------------------------------------------------------------------
+;; Predicates
+;; -------------------------------------------------------------------------
\ No newline at end of file
diff -ruN gcc-releases-gcc-8/gcc/config.gcc gcc-releases-gcc-8-lldevcpu/gcc/config.gcc
--- gcc-releases-gcc-8/gcc/config.gcc	2020-04-15 03:17:00.000000000 +0300
+++ gcc-releases-gcc-8-lldevcpu/gcc/config.gcc	2020-06-10 20:18:04.000000000 +0300
@@ -349,6 +349,10 @@
 ft32*)	cpu_type=ft32
 	target_has_targetm_common=no
 	;;
+lldevcpu*)
+	cpu_type=lldevcpu
+	target_has_targetm_common=no
+	;;
 moxie*)	cpu_type=moxie
 	target_has_targetm_common=no
 	;;
@@ -1330,6 +1334,12 @@
 	tm_file="${tm_file} dbxelf.h elfos.h moxie/moxiebox.h newlib-stdint.h"
 	tmake_file="${tmake_file} moxie/t-moxiebox"
 	;;
+lldevcpu-*-*)
+	gas=yes
+	gnu_ld=yes
+	tm_file="dbxelf.h elfos.h newlib-stdint.h ${tm_file}"
+	tmake_file="${tmake_file} lldevcpu/t-lldevcpu"
+	;;
 h8300-*-elf*)
 	tmake_file="h8300/t-h8300"
 	tm_file="h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h"
